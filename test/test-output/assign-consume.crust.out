[INFO] Begin checking linearity, generating program info
[INFO] Generated program info, checking linearity of functions
[INFO] Checking linearity of function: main
[DEBUG] Added args to lin_map: []
[INFO] Checking function body
[INFO] Checking new block
[DEBUG] Added locals to lin_map: new -> Unassigned : struct lin_point
new2 -> Unassigned : struct lin_point
new3 -> Unassigned : struct lin_point
new4 -> Unassigned : struct lin_point

[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 1"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 2"
[INFO] Marking new as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new2 = struct lin_point new"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new2 = struct lin_point new"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new"
Checking lone identifier "new" (is_consumed=true)
[INFO] Marking new as consumed
[INFO] Marking new2 as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new3 = struct lin_point new2"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new3 = struct lin_point new2"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new2"
Checking lone identifier "new2" (is_consumed=true)
[INFO] Marking new2 as consumed
[INFO] Marking new3 as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new4 = struct lin_point new3"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new4 = struct lin_point new3"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new3"
Checking lone identifier "new3" (is_consumed=true)
[INFO] Marking new3 as consumed
[INFO] Marking new4 as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point :{x, y} = struct lin_point new4"
[INFO] Checking assignment expression
[DEBUG] Assignment is  ":{x, y} = struct lin_point new4"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new4"
Checking lone identifier "new4" (is_consumed=true)
[INFO] Marking new4 as consumed
[INFO] Marking x as assigned
[INFO] Marking y as assigned
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int return(unrestricted int unrestricted int x + unrestricted int y)"
[INFO] Checking function call to return
[DEBUG] Function call args: unrestricted int unrestricted int x + unrestricted int y
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int x + unrestricted int y"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int x"
Checking lone identifier "x" (is_consumed=false)
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int y"
Checking lone identifier "y" (is_consumed=false)
[DEBUG] Checked statements, lin_map: new -> Used : struct lin_point
new2 -> Used : struct lin_point
new3 -> Used : struct lin_point
new4 -> Used : struct lin_point

[INFO] Removing locally declared variables
[INFO] Found new with state Used
[INFO] Found new2 with state Used
[INFO] Found new3 with state Used
[INFO] Found new4 with state Used
[DEBUG] Didn't find decl x, assuming unrestricted
[DEBUG] Didn't find decl y, assuming unrestricted
[DEBUG] Final lin_map for main []
[INFO] Done checking linearity

Abstract Syntax Tree:
linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
struct lin_point new2;
struct lin_point new3;
struct lin_point new4;
unrestricted int x;
unrestricted int y;
new = { struct lin_point -> 1, 2};
new2 = new;
new3 = new2;
new4 = new3;
:{x, y} = new4;
return x + y;
}

Semantic Checked Abstract Syntax Tree:
linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
struct lin_point new2;
struct lin_point new3;
struct lin_point new4;
unrestricted int x;
unrestricted int y;
struct lin_point struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2};
struct lin_point struct lin_point new2 = struct lin_point new;
struct lin_point struct lin_point new3 = struct lin_point new2;
struct lin_point struct lin_point new4 = struct lin_point new3;
struct lin_point :{x, y} = struct lin_point new4;
return unrestricted int unrestricted int x + unrestricted int y;
}

Linearity Results:
LINEAR CHECK SUCCESS
Program Info:
Struct Info:
lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

Func Info:
[]
Linear Maps:
main -> []


COMPILATION SUCCESS

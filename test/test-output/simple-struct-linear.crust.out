[INFO] Begin checking linearity, generating program info
[INFO] Generated program info, checking linearity of functions
[INFO] Checking linearity of function: main
[DEBUG] Added args to lin_map: []
[INFO] Checking function body
[INFO] Checking new block
[DEBUG] Added locals to lin_map: a -> Unassigned : struct lin_point

[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point a = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point a = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 1"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 2"
[INFO] Marking a as assigned
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int b.x = unrestricted int 3"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "b.x = unrestricted int 3"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 3"
[DEBUG] Variable b not found, assuming unrestricted
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int b.y = unrestricted int 4"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "b.y = unrestricted int 4"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 4"
[DEBUG] Variable b not found, assuming unrestricted
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point :{c, d} = struct lin_point a"
[INFO] Checking assignment expression
[DEBUG] Assignment is  ":{c, d} = struct lin_point a"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point a"
Checking lone identifier "a" (is_consumed=true)
[INFO] Marking a as consumed
[INFO] Marking c as assigned
[INFO] Marking d as assigned
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int return(unrestricted int unrestricted int unrestricted int unrestricted int c + unrestricted int b.x + unrestricted int b.x * unrestricted int unrestricted int unrestricted int b.y + unrestricted int b.y + unrestricted int d)"
[INFO] Checking function call to return
[DEBUG] Function call args: unrestricted int unrestricted int unrestricted int unrestricted int c + unrestricted int b.x + unrestricted int b.x * unrestricted int unrestricted int unrestricted int b.y + unrestricted int b.y + unrestricted int d
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int unrestricted int unrestricted int c + unrestricted int b.x + unrestricted int b.x * unrestricted int unrestricted int unrestricted int b.y + unrestricted int b.y + unrestricted int d"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int unrestricted int c + unrestricted int b.x + unrestricted int b.x"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int c + unrestricted int b.x"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int c"
Checking lone identifier "c" (is_consumed=false)
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int b.x"
[DEBUG] Variable b not found, assuming unrestricted
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int b.x"
[DEBUG] Variable b not found, assuming unrestricted
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int unrestricted int b.y + unrestricted int b.y + unrestricted int d"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int b.y + unrestricted int b.y"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int b.y"
[DEBUG] Variable b not found, assuming unrestricted
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int b.y"
[DEBUG] Variable b not found, assuming unrestricted
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int d"
Checking lone identifier "d" (is_consumed=false)
[DEBUG] Checked statements, lin_map: a -> Used : struct lin_point

[INFO] Removing locally declared variables
[INFO] Found a with state Used
[DEBUG] Didn't find decl b, assuming unrestricted
[DEBUG] Didn't find decl c, assuming unrestricted
[DEBUG] Didn't find decl d, assuming unrestricted
[DEBUG] Final lin_map for main []
[INFO] Done checking linearity

Abstract Syntax Tree:
linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted struct point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point a;
struct point b;
unrestricted int c;
unrestricted int d;
a = { struct lin_point -> 1, 2};
b.x = 3;
b.y = 4;
:{c, d} = a;
return c + b.x + b.x * b.y + b.y + d;
}

Semantic Checked Abstract Syntax Tree:
linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted struct point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point a;
struct point b;
unrestricted int c;
unrestricted int d;
struct lin_point struct lin_point a = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2};
unrestricted int b.x = unrestricted int 3;
unrestricted int b.y = unrestricted int 4;
struct lin_point :{c, d} = struct lin_point a;
return unrestricted int unrestricted int unrestricted int unrestricted int c + unrestricted int b.x + unrestricted int b.x * unrestricted int unrestricted int unrestricted int b.y + unrestricted int b.y + unrestricted int d;
}

Linearity Results:
LINEAR CHECK SUCCESS
Program Info:
Struct Info:
lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

Func Info:
[]
Linear Maps:
main -> []


COMPILATION SUCCESS

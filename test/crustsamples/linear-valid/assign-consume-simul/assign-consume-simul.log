[INFO] 
Generating Abstract Syntax Tree
[DEBUG] linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
unrestricted int x;
unrestricted int y;
unrestricted int result;
new = { struct lin_point -> 1, 2};
new = new;
:{x, y} = new;
result = x + y;
print("result: ");
print(result);
print("
");
return result;
}
[INFO] 
Generating Semantically Checked Abstract Syntax Tree
[DEBUG] 
SAST:
[DEBUG] linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
unrestricted int x;
unrestricted int y;
unrestricted int result;
struct lin_point struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2};
struct lin_point struct lin_point new = struct lin_point new;
struct lin_point :{x, y} = struct lin_point new;
unrestricted int unrestricted int result = unrestricted int unrestricted int x + unrestricted int y;
unrestricted int print(unrestricted string "result: ");
unrestricted int print(unrestricted int result);
unrestricted int print(unrestricted string "
");
return unrestricted int result;
}
[INFO] 
Doing Linearity Checks...
[INFO] Begin checking linearity, generating program info
[INFO] Generated program info, checking linearity of functions
[INFO] Checking linearity of function: main
[DEBUG] Added args to lin_map: []
[INFO] Checking function body
[INFO] Checking new block
[DEBUG] Added locals to lin_map: new -> Unassigned : struct lin_point

[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 1"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 2"
[INFO] Marking new as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new = struct lin_point new"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new = struct lin_point new"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new"
Checking lone identifier "new" (is_consumed=true)
[INFO] Marking new as consumed
[INFO] Marking new as assigned
[DEBUG] new is being re-asigned after use
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point :{x, y} = struct lin_point new"
[INFO] Checking assignment expression
[DEBUG] Assignment is  ":{x, y} = struct lin_point new"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new"
Checking lone identifier "new" (is_consumed=true)
[INFO] Marking new as consumed
[INFO] Marking x as assigned
[INFO] Marking y as assigned
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int result = unrestricted int unrestricted int x + unrestricted int y"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "unrestricted int result = unrestricted int unrestricted int x + unrestricted int y"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int unrestricted int x + unrestricted int y"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int x"
Checking lone identifier "x" (is_consumed=false)
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int y"
Checking lone identifier "y" (is_consumed=false)
[INFO] Marking result as assigned
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int print(unrestricted string "result: ")"
[INFO] Checking function call to print
[DEBUG] Function call args: unrestricted string "result: "
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted string "result: ""
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int print(unrestricted int result)"
[INFO] Checking function call to print
[DEBUG] Function call args: unrestricted int result
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int result"
Checking lone identifier "result" (is_consumed=true)
[INFO] Marking result as consumed
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int print(unrestricted string "
")"
[INFO] Checking function call to print
[DEBUG] Function call args: unrestricted string "
"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted string "
""
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int return(unrestricted int result)"
[INFO] Checking function call to return
[DEBUG] Function call args: unrestricted int result
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int result"
Checking lone identifier "result" (is_consumed=true)
[INFO] Marking result as consumed
[DEBUG] Checked statements, lin_map: new -> Used : struct lin_point

[INFO] Removing locally declared variables
[INFO] Found new with state Used
[DEBUG] Didn't find decl x, assuming unrestricted
[DEBUG] Didn't find decl y, assuming unrestricted
[DEBUG] Didn't find decl result, assuming unrestricted
[DEBUG] Final lin_map for main []
[INFO] Done checking linearity
[DEBUG] LINEAR CHECK SUCCESS
Program Info:
Struct Info:
lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

Func Info:
[]
Linear Maps:
main -> []

[DEBUG] 
Linear Report:
[DEBUG] LINEAR CHECK SUCCESS
Program Info:
Struct Info:
lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

Func Info:
[]
Linear Maps:
main -> []

[INFO] 
Linearity Check Passed
[INFO] 
Doing psuedo-translations...
[INFO] Generating struct info
[DEBUG] Struct info: lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

[DEBUG] 
Translated:
[DEBUG] linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
unrestricted int x;
unrestricted int y;
unrestricted int result;
{
unrestricted int new.x = unrestricted int 1
unrestricted int new.y = unrestricted int 2
};
struct lin_point struct lin_point new = struct lin_point new;
struct lin_point :{x, y} = struct lin_point new;
unrestricted int unrestricted int result = unrestricted int unrestricted int x + unrestricted int y;
unrestricted int print(unrestricted string "result: ");
unrestricted int print(unrestricted int result);
unrestricted int print(unrestricted string "
");
return unrestricted int result;
}

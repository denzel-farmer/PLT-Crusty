; ModuleID = 'Crusty'
source_filename = "Crusty"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@char_fmt = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@float_fmt = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@str_fmt = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@char_fmt.2 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@float_fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@str_fmt.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@char_fmt.6 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@float_fmt.7 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@str_fmt.8 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@globalstring = private unnamed_addr constant [7 x i8] c"Iters:\00", align 1
@globalstring.9 = private unnamed_addr constant [8 x i8] c"Result:\00", align 1
@globalstring.10 = private unnamed_addr constant [7 x i8] c"Final:\00", align 1

define { i32, i32 } @make(i32 %0, i32 %1) {
entry:
  %x = alloca i32, align 4
  store i32 %0, i32* %x, align 4
  %y = alloca i32, align 4
  store i32 %1, i32* %y, align 4
  %new = alloca { i32, i32 }, align 8
  %x1 = load i32, i32* %x, align 4
  %tmp = getelementptr inbounds { i32, i32 }, { i32, i32 }* %new, i32 0, i32 0
  store i32 %x1, i32* %tmp, align 4
  %y2 = load i32, i32* %y, align 4
  %tmp3 = getelementptr inbounds { i32, i32 }, { i32, i32 }* %new, i32 0, i32 1
  store i32 %y2, i32* %tmp3, align 4
  %new4 = load { i32, i32 }, { i32, i32 }* %new, align 4
  ret { i32, i32 } %new4
}

define i32 @consume({ i32, i32 } %0) {
entry:
  %p = alloca { i32, i32 }, align 8
  store { i32, i32 } %0, { i32, i32 }* %p, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %field_ptr = getelementptr inbounds { i32, i32 }, { i32, i32 }* %p, i32 0, i32 0
  %field_val = load i32, i32* %field_ptr, align 4
  store i32 %field_val, i32* %x, align 4
  %field_ptr1 = getelementptr inbounds { i32, i32 }, { i32, i32 }* %p, i32 0, i32 1
  %field_val2 = load i32, i32* %field_ptr1, align 4
  store i32 %field_val2, i32* %y, align 4
  %x3 = load i32, i32* %x, align 4
  %y4 = load i32, i32* %y, align 4
  %tmp = add i32 %x3, %y4
  ret i32 %tmp
}

define i32 @main() {
entry:
  %outer = alloca { i32, i32 }, align 8
  %result = alloca i32, align 4
  %iters = alloca i32, align 4
  store i32 10, i32* %iters, align 4
  store i32 0, i32* %result, align 4
  %make_result = call { i32, i32 } @make(i32 0, i32 0)
  store { i32, i32 } %make_result, { i32, i32 }* %outer, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %iters1 = load i32, i32* %iters, align 4
  %tmp = icmp sgt i32 %iters1, 0
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %inner = alloca { i32, i32 }, align 8
  %outer2 = load { i32, i32 }, { i32, i32 }* %outer, align 4
  %consume_result = call i32 @consume({ i32, i32 } %outer2)
  store i32 %consume_result, i32* %result, align 4
  %result3 = load i32, i32* %result, align 4
  %tmp4 = add i32 %result3, 1
  %result5 = load i32, i32* %result, align 4
  %make_result6 = call { i32, i32 } @make(i32 %result5, i32 %tmp4)
  store { i32, i32 } %make_result6, { i32, i32 }* %inner, align 4
  %inner7 = load { i32, i32 }, { i32, i32 }* %inner, align 4
  store { i32, i32 } %inner7, { i32, i32 }* %outer, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_fmt.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @globalstring, i32 0, i32 0))
  %iters8 = load i32, i32* %iters, align 4
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), i32 %iters8)
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_fmt.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @globalstring.9, i32 0, i32 0))
  %result11 = load i32, i32* %result, align 4
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), i32 %result11)
  %iters13 = load i32, i32* %iters, align 4
  %tmp14 = sub i32 %iters13, 1
  store i32 %tmp14, i32* %iters, align 4
  br label %while

while_end:                                        ; preds = %while
  %outer15 = load { i32, i32 }, { i32, i32 }* %outer, align 4
  %consume_result16 = call i32 @consume({ i32, i32 } %outer15)
  store i32 %consume_result16, i32* %result, align 4
  %printf17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_fmt.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @globalstring.10, i32 0, i32 0))
  %result18 = load i32, i32* %result, align 4
  %printf19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), i32 %result18)
  %result20 = load i32, i32* %result, align 4
  ret i32 %result20
}

declare i32 @printf(i8*, ...)

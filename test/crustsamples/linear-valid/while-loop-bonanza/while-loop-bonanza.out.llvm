; ModuleID = 'Crusty'
source_filename = "Crusty"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@char_fmt = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@float_fmt = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@str_fmt = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@char_fmt.2 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@float_fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@str_fmt.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@char_fmt.6 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@float_fmt.7 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@str_fmt.8 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define { i32, i32 } @make() {
entry:
  %new = alloca { i32, i32 }, align 8
  %tmp = getelementptr inbounds { i32, i32 }, { i32, i32 }* %new, i32 0, i32 0
  store i32 1, i32* %tmp, align 4
  %tmp1 = getelementptr inbounds { i32, i32 }, { i32, i32 }* %new, i32 0, i32 1
  store i32 2, i32* %tmp1, align 4
  %new2 = load { i32, i32 }, { i32, i32 }* %new, align 4
  ret { i32, i32 } %new2
}

define i32 @consume({ i32, i32 } %0) {
entry:
  %p = alloca { i32, i32 }, align 8
  store { i32, i32 } %0, { i32, i32 }* %p, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %field_ptr = getelementptr inbounds { i32, i32 }, { i32, i32 }* %p, i32 0, i32 0
  %field_val = load i32, i32* %field_ptr, align 4
  store i32 %field_val, i32* %x, align 4
  %field_ptr1 = getelementptr inbounds { i32, i32 }, { i32, i32 }* %p, i32 0, i32 1
  %field_val2 = load i32, i32* %field_ptr1, align 4
  store i32 %field_val2, i32* %y, align 4
  %x3 = load i32, i32* %x, align 4
  %y4 = load i32, i32* %y, align 4
  %tmp = add i32 %x3, %y4
  ret i32 %tmp
}

define i32 @main() {
entry:
  %outer = alloca { i32, i32 }, align 8
  %result = alloca i32, align 4
  %make_result = call { i32, i32 } @make()
  store { i32, i32 } %make_result, { i32, i32 }* %outer, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  br i1 true, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %inner = alloca { i32, i32 }, align 8
  %outer1 = load { i32, i32 }, { i32, i32 }* %outer, align 4
  %consume_result = call i32 @consume({ i32, i32 } %outer1)
  %make_result2 = call { i32, i32 } @make()
  store { i32, i32 } %make_result2, { i32, i32 }* %inner, align 4
  %inner3 = load { i32, i32 }, { i32, i32 }* %inner, align 4
  store { i32, i32 } %inner3, { i32, i32 }* %outer, align 4
  br label %while

while_end:                                        ; preds = %while
  %outer4 = load { i32, i32 }, { i32, i32 }* %outer, align 4
  %consume_result5 = call i32 @consume({ i32, i32 } %outer4)
  store i32 %consume_result5, i32* %result, align 4
  %result6 = load i32, i32* %result, align 4
  ret i32 %result6
}

declare i32 @printf(i8*, ...)

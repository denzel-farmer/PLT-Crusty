[INFO] 
Generating Abstract Syntax Tree
[DEBUG] linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
unrestricted int x;
unrestricted int y;
new = { struct lin_point -> 1, 2};
:{x, y} = new;
:{x, y} = new;
return x + y;
}
[INFO] 
Generating Semantically Checked Abstract Syntax Tree
[DEBUG] 
SAST:
[DEBUG] linear struct lin_point {
unrestricted int x;
unrestricted int y;
};
unrestricted int main() {
struct lin_point new;
unrestricted int x;
unrestricted int y;
struct lin_point struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2};
struct lin_point :{x, y} = struct lin_point new;
struct lin_point :{x, y} = struct lin_point new;
return unrestricted int unrestricted int x + unrestricted int y;
}
[INFO] 
Doing Linearity Checks...
[INFO] Begin checking linearity, generating program info
[INFO] Generated program info, checking linearity of functions
[INFO] Checking linearity of function: main
[DEBUG] Added args to lin_map: []
[INFO] Checking function body
[INFO] Checking new block
[DEBUG] Added locals to lin_map: new -> Unassigned : struct lin_point

[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking assignment expression
[DEBUG] Assignment is  "struct lin_point new = struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point { struct lin_point -> unrestricted int 1, unrestricted int 2}"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 1"
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int 2"
[INFO] Marking new as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point :{x, y} = struct lin_point new"
[INFO] Checking assignment expression
[DEBUG] Assignment is  ":{x, y} = struct lin_point new"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new"
Checking lone identifier "new" (is_consumed=true)
[INFO] Marking new as consumed
[INFO] Marking x as assigned
[INFO] Marking y as assigned
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point :{x, y} = struct lin_point new"
[INFO] Checking assignment expression
[DEBUG] Assignment is  ":{x, y} = struct lin_point new"
[INFO] Checking expression
[DEBUG] Expression is  "struct lin_point new"
Checking lone identifier "new" (is_consumed=true)
[INFO] Marking new as consumed
[INFO] Checking expression
[DEBUG] Expression is  "unrestricted int return(unrestricted int unrestricted int x + unrestricted int y)"
[DEBUG] Checked statements, lin_map: Variable new consumed more than once
[DEBUG] Final lin_map for main Variable new consumed more than once
[INFO] Done checking linearity
[DEBUG] LINEAR CHECK FAIL
Program Info:
Struct Info:
lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

Func Info:
[]
Linear Maps:
main -> Variable new consumed more than once

[DEBUG] 
Linear Report:
[DEBUG] LINEAR CHECK FAIL
Program Info:
Struct Info:
lin_point -> linear struct lin_point {
unrestricted int x;
unrestricted int y;
}

Func Info:
[]
Linear Maps:
main -> Variable new consumed more than once

lli: <stdin>:1:1: error: expected top-level entity
\Linearity Check: FAILED
^

